@page
@model MitigationGraphModel

@{  
  var date = Newtonsoft.Json.JsonConvert.SerializeObject(Model.x_axis);
  var total = Newtonsoft.Json.JsonConvert.SerializeObject(Model.y_axis);
  var nws = Newtonsoft.Json.JsonConvert.SerializeObject(Model.news);
  var annotations = Newtonsoft.Json.JsonConvert.SerializeObject(Model.annotations);
  
  var state = Model.Input;
  
  ViewData["Title"] = "State News";
}

<h2>State News For: @Html.Raw(state)</h2>

<!--
<br />
Raw data: @Html.Raw(date);
<br />
Raw data: @Html.Raw(total);
<br />
Raw data: @Html.Raw(nws);
-->
<br />
News: @Html.Raw(annotations);
<br />
<br />

@{
  if(@Model.EX != null) {
    <br />
    <br />
    <h3>**ERROR: @Model.EX.Message</h3>
    <br />
    <hr />
    <br />
    <br />
  }
}

<div class="box-body">  
  <div class="chart-container">  
     <canvas id="myChart"></canvas>  
  </div>  
</div>  

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.bundle.min.js"></script>

<script>
var ctx = document.getElementById("myChart");
var myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: @Html.Raw(date),
        datasets: [
        {
            label: "Total Cases", 
            data: @Html.Raw(total),
            borderColor: "red",
            pointBackgroundColor: "black",

            borderWidth: 1
        },
        {
            label: "News",
            data: @Html.Raw(nws),
            borderColor: "blue",
            pointBackgroundColor: "black",
            
            borderWidth: 1
        }
        ]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero:true
                }
            }]
        }
    }
});
</script>

<!--
<script>
var chartData = {
  labels: @Html.Raw(date);
  datasets: [
  {
      label: "Total Cases",
      data: @Html.Raw(total),
      borderColor: "red",
      pointBackgroundColor: "black",
      
      borderWidth: 1
  },
  {
      label: "News",
      data: @Html.Raw(nws),
      borderColor: "blue",
      pointBackgroundColor: "black",
      
      borderWidth: 1
  }
  ]
};

var myChart = new Chart(ctx, {
    type: 'line',
    data: chartData,
    options: {
        title: {
            display: true,
            text: "Task 4"
        },
        tooltips: {
            mode: 'label',
            callbacks: {
                label: function(tooltipItem, data) {
                    var t_cases = data.datasets[tooltipItem.datasetIndex].label;
                    var _news = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.datasetIndex];
                    return t_test + _news;
                }
            }
        },
        responsive: true,
        scales: {
            xAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }],
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>
-->
